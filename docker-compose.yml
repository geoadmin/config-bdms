version: '3.7'

services:
  traefik:
    image: traefik:v2.5
    restart: unless-stopped
    command:
      - --api.insecure=false
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
    ports:
      - 80:80
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - traefik.enable=true
  client:
    image: ghcr.io/geoadmin/suite-bdms-client:${DOCKER_IMAGE_TAG}
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.client.rule=Host(`${BASE_DOMAIN}`)
      - traefik.http.services.client.loadbalancer.server.port=3000
  api:
    image: ghcr.io/geoadmin/suite-bdms-api:${DOCKER_IMAGE_TAG}
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT}
      - CONNECTIONSTRINGS__BdmsContext=${DB_CONNECTIONSTRING}
      - TZ
      - S3__ENDPOINT=${S3_ENDPOINT}
      - S3__BUCKET_NAME=${S3_BUCKET_NAME}
      - S3__ACCESS_KEY=${S3_ACCESS_KEY}
      - S3__SECRET_KEY=${S3_SECRET_KEY}
      - S3__SECURE=${S3_SECURE}
      - ReverseProxy__Clusters__pythonApi__Destinations__legacyApi__Address=http://api-legacy:8888
      - Auth__Authority=${AUTH_AUTHORITY}
      - Auth__Audience=${AUTH_AUDIENCE}
      - Auth__Scopes=${AUTH_SCOPES}
      - Auth__GroupClaimType=${AUTH_GROUP_CLAIM_TYPE}
      - Auth__AuthorizedGroupName=${AUTH_AUTHORIZED_GROUP_NAME}
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=Host(`${BASE_DOMAIN}`) && PathPrefix(`/api`)
      - traefik.http.services.api.loadbalancer.server.port=8080
  api-legacy:
    image: ghcr.io/geoadmin/suite-bdms-api-legacy:${DOCKER_IMAGE_TAG}
    restart: unless-stopped
    extra_hosts:
      - host.docker.internal:host-gateway
    environment:
      - DB_HOST
      - DB_PORT
      - DB_DATABASE
      - DB_USERNAME
      - DB_PASSWORD
      - S3_ENDPOINT
      - S3_BUCKET_NAME
      - S3_ACCESS_KEY
      - S3_SECRET_KEY
      - S3_SECURE
      - SMTP_SENDER
      - SMTP_PASSWORD
      - SMTP_RECIPIENTS
      - SMTP_SERVER
      - SMTP_PORT
      - SMTP_TLS
      - SMTP_STARTTLS
      - APP_BASE_DOMAIN=${BASE_DOMAIN}
      - TZ
  maintenance:
    image: docker
    restart: unless-stopped
    environment:
      - TZ
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - /bin/ash
      - -c
      - |
        apk add --update tzdata
        > /etc/crontabs/root
        (crontab -l; echo '50 3 * * * /usr/local/bin/docker system prune --all --force') | crontab -
        /usr/sbin/crond -f -d 0
  watchtower:
    image: containrrr/watchtower
    restart: unless-stopped
    environment:
      - WATCHTOWER_SCHEDULE=${UPDATE_SCHEDULE}
      - TZ
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
